plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
}

configurations {
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    dev
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    useFabricMixin = true
    mixinConfig "toomanyorigins.mixins.json"
    mixinConfig "toomanyorigins.forge.mixins.json"

    mixinConfig "apugli.mixins.json"
    mixinConfig "apugli.forge.mixins.json"
    mixinConfig "apugli.origins.forge.mixins.json"

    launches {
        client {
            property 'mixin.debug', 'true'
        }
    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "me.shedaniel:architectury-forge:${rootProject.architectury_version}"
    modApi "me.shedaniel.cloth:cloth-config-forge:${rootProject.clothconfig_version}"
    modApi "top.theillusivec4.caelus:caelus-forge:${rootProject.caelus_forge_version}"
    modApi group: 'com.github.EdwinMindcraft.origins-architectury', name: 'Origins-1.16.5-forge', version: "${rootProject.origins_architectury_version}"
    modApi group: 'com.github.MerchantPug.apugli', name: 'Apugli-1.16.5-forge', version: "${rootProject.apugli_version}"

    implementation(project(path: ":common")) {
        transitive = false
    }
    developmentForge(project(path: ":common")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) {
        transitive = false
    }
    shadowCommon(group: 'com.github.MerchantPug.apugli', name: 'Apugli-1.16.5-forge', version: "${rootProject.apugli_version}") {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

import com.github.jengelman.gradle.plugins.shadow.transformers.Transformer
import com.github.jengelman.gradle.plugins.shadow.transformers.TransformerContext
import shadow.org.apache.tools.zip.ZipOutputStream
import shadow.org.apache.tools.zip.ZipEntry

import java.nio.charset.Charset

class ModsTransformer implements Transformer {

    private final List<String> lines = new ArrayList<>();

    @Override
    boolean canTransformResource(FileTreeElement element) {
        return element.getRelativePath().getPathString().equalsIgnoreCase("META-INF/mods.toml");
    }

    @Override
    void transform(TransformerContext context) {
        List<String> result = new ArrayList<>();
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(context.getIs()))
            while (true) {
                String line = reader.readLine();
                if (line == null)
                    break;
                result.add(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (!this.lines.isEmpty())
            result.removeIf({ x -> x.startsWith("modLoader=") || x.startsWith("loaderVersion=") || x.startsWith("license=") || x.startsWith("issueTrackerURL=") || x.startsWith("showAsResourcePack=") });
        this.lines.addAll(result);
    }

    @Override
    boolean hasTransformedResource() {
        return !this.lines.isEmpty();
    }

    @Override
    void modifyOutputStream(ZipOutputStream jos, boolean preserveFileTimestamps) {
        ZipEntry entry = new ZipEntry("META-INF/mods.toml");
        try {
            entry.setTime(TransformerContext.getEntryTimestamp(preserveFileTimestamps, entry.getTime()))
            jos.putNextEntry(entry)
            jos.write(this.lines.stream().reduce({ x, y -> x + "\n" + y }).orElse("").getBytes(Charset.forName("UTF-8")))
        } catch (IOException e) {
            e.printStackTrace();
        }

        this.lines.clear();
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "toomanyorigins.accessWidener"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"

    transform(new ModsTransformer())
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "forge"
}

jar {
    classifier "dev"
}

java {
    withSourcesJar()
}

sourcesJar {
    def commonSources = project(":common").remapSourcesJar
    dependsOn commonSources
    from zipTree(commonSources.output)
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                classifier null
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}