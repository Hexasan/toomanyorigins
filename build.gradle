plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'signing'
	id 'maven-publish'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.modrinth.minotaur' version '2.+'
	id "com.github.breadmoirai.github-release" version "2.2.12"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name = "Pug's Maven"
		url = 'https://maven.merchantpug.net/releases/'
	}
	maven {
		url "https://jitpack.io"
	}
	maven {
		name = "Ladysnake Libs"
		url = 'https://ladysnake.jfrog.io/artifactory/mods'
	}
	maven {
		url = 'https://maven.cafeteria.dev'
		content {
			includeGroup 'net.adriantodt.fabricmc'
		}
	}
	maven {
		url "https://maven.jamieswhiteshirt.com/libs-release"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
	maven {
		url "https://maven.shedaniel.me/"
	}
	maven {
		url "https://maven.terraformersmc.com/"
	}
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Origins
	// modImplementation ("com.github.apace100:origins-fabric:${project.origins_version}")
	// Temporary fix (Thank you eggohito)
	modImplementation ("com.github.eggohito:origins-fabric:${project.origins_version}")

	// MerchantPug Maven Apugli
	modImplementation("net.merchantpug:apugli:${project.apugli_version}") {
		exclude group: "com.github.eggohito", module: "apoli"
	}
	include "net.merchantpug:apugli:${project.apugli_version}"

	// JitPack Apugli (Not preferable, use only for dev builds).
	// modImplementation("com.github.merchantpug:apugli:${project.apugli_version}")
	// include "com.github.merchantpug:apugli:${project.apugli_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	// Minecraft 1.17 (21w19a) upwards uses Java 16.
	it.options.release = 17
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			afterEvaluate {
				artifact remapJar
				artifact(sourcesJar.archiveFile) {
					classifier = "sources"
					builtBy remapSourcesJar
				}
			}
		}
	}
	repositories {
		maven {
			name = "merchantpug"
			url = "https://maven.merchantpug.net/snapshots"
			credentials(PasswordCredentials)
			authentication {
				create("basic", BasicAuthentication)
			}
		}
	}
}

curseforge {
	if (System.getenv("CURSEFORGE_TOKEN") != null) {
		apiKey = System.getenv("CURSEFORGE_TOKEN")
		project {
			id = cf_project_id
			changelog = new File("$project.rootDir/CHANGELOG.md").getText('UTF-8')
			changelogType = 'markdown'
			releaseType = 'beta'
			java_versions.split(", ").each { String javaVersion ->
				addGameVersion javaVersion
			}

			mod_loaders.split(", ").each { String loader ->
				addGameVersion loader
			}

			game_versions.split(", ").each { String gameVersion ->
				addGameVersion gameVersion
			}

			mainArtifact(remapJar) {
				displayName = "v$project.version Fabric/Quilt"
				relations {
					required_deps.split(", ").each { String project ->
						requiredDependency project
					}

					embedded_deps.split(", ").each { String project ->
						embeddedLibrary project
					}
				}
			}
		}
	}
}

modrinth {
	if (System.getenv("MODRINTH_TOKEN") != null) {
		token = System.getenv("MODRINTH_TOKEN")
		projectId = mr_project_id
		versionNumber = "${project.version}"
		versionType = "beta"
		versionName = "v$project.version Fabric/Quilt"
		changelog = new File("$project.rootDir/CHANGELOG.md").getText('UTF-8')
		uploadFile = remapJar
		gameVersions = game_versions.split(", ").toList()
		loaders = mod_loaders.split(", ").collect { String loader -> loader.toLowerCase(Locale.ROOT) }
		dependencies {
			required_deps.split(", ").each { String project ->
				required.project project
			}

			embedded_deps.split(", ").each { String project ->
				embedded.project project
			}
		}
	}
}

githubRelease {
	if (System.getenv("GITHUB_TOKEN") != null) {
		token = System.getenv("GITHUB_TOKEN")
		owner = gh_owner
		repo = gh_repo
		tagName = version
		prerelease = true
		targetCommitish = gh_commitish
		releaseName = "v$project.version Fabric/Quilt"
		body {
			new File("$project.rootDir/CHANGELOG.md").getText('UTF-8')
		}
	}
}
